%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Sublime Text Key Map
file_extensions:
  - sublime-keymap
scope: source.json.sublimekeymap
contexts:
  main:
    - include: comments
    - match: \[
      scope: punctuation.definition.array.begin.json
      push:
        - meta_content_scope: meta.keybinding.collection.sublimekeymap
        - match: \]
          scope: punctuation.definition.array.end.json
          set: only-comments
        - match: \{
          scope: punctuation.definition.dictionary.begin.json
          push: [in-array-expect-comma, main-keys]
        - include: comments
        - match: '[^\s\]{/]+'
          scope: invalid.illegal.key.sequence.sublimekeymap

  in-array-expect-comma:
    - match: (?=\])
      pop: true
    - include: expect-comma
    - match: (,)(\s*,)*
      captures:
        1: punctuation.separator.array.json
        2: invalid.illegal.unexpected-separator.json
      pop: true
    - match: '[^\],]+'
      scope: invalid.illegal.expected-comma.inside-array.json

  in-dictionary-expect-comma:
    - match: (?=\})
      pop: true
    - include: expect-comma
    - match: (,)(\s*,)*
      captures:
        1: punctuation.separator.dictionary.pair.json
        2: invalid.illegal.unexpected-separator.json
      pop: true
    - match: '[^},]+'
      scope: invalid.illegal.expected-comma.inside-dictionary.json

  expect-comma:
    - include: comments
    - match: \s+
    - match: '[^\s,\]}{\[]+'
      scope: invalid.illegal.expected-comma.sublimekeymap

  main-keys:
    - match: (")(keys)(")\s*(:)\s*(\[)
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json keyword.other.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
        5: punctuation.definition.array.begin.json
      push:
        - match: \]
          scope: punctuation.definition.array.end.json
          set: in-dictionary-expect-comma
        - match: (")(<)(character)(>)(")
          scope: string.quoted.double.json
          captures:
            1: punctuation.keybinding.definition.key.sequence.start.sublimekeymap
            3: entity.other.attribute-name.key.captured.sublimekeymap
            5: punctuation.keybinding.definition.key.sequence.end.sublimekeymap
          push: in-array-expect-comma
        - match: \"
          scope: string.quoted.double.json punctuation.keybinding.definition.key.sequence.start.sublimekeymap
          push:
            - meta_content_scope: meta.key.sequence.sublimekeymap
            - match: \"
              scope: string.quoted.double.json punctuation.keybinding.definition.key.sequence.end.sublimekeymap
              set: in-array-expect-comma
            - match: ''
              push: # match modifier keys first
                - meta_content_scope: string.quoted.double.json
                - match: (shift|ctrl|alt|super|command|option)(\+)
                  captures:
                    1: support.function.modifier.key.sublimekeymap
                    2: keyword.modifier.key.connector.sublimekeymap
                    3: invalid.illegal.key.sequence.sublimekeymap
                - match: '' # then proceed to other keys
                  set:
                    - meta_content_scope: string.quoted.double.json
                    - match: (?=")
                      pop: true
                    - match: (\\)(")
                      captures:
                        1: constant.character.escape.json
                        2: string.key.literal.sublimekeymap
                    - match: 'f(?:2[1-9]|[3-9]\d+|\d{3,})|\s+'
                      scope: invalid.illegal.key.sublimekeymap
                    - match: '\b(?:up|down|right|left|insert|home|end|pageup|pagedown|backspace|delete|tab|enter|pause|escape|space|keypad[0-9]|keypad_(?:period|divide|multiply|minus|plus|enter)|clear|sysreq|break|context_menu|browser_(?:back|forward|refresh|stop|search|favorites|home)|forward_slash|backquote|plus|equals|minus|f(20|1[0-9]|[1-9]))\b'
                      scope: entity.other.attribute-name.key.named.sublimekeymap
                    - match: "[A-Za-z0-9,;.:_=+-]{2,}"
                      scope: invalid.illegal.key.sublimekeymap
                    - match: .
                      scope: string.key.literal.sublimekeymap
        - include: comments
        - match: '[^/\s"\]]+'
          scope: invalid.illegal.expected-string-or-end-of-array.sublime-keymap
    - match: (")(command)(")\s*(:)
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json keyword.other.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
      push: expect-command-name
    - match: (")(args)(")\s*(:)
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json keyword.other.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
      push: [in-dictionary-expect-comma, expect-dictionary]
    - match: (")(context)(")\s*(:)
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json keyword.other.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
      push: [in-dictionary-expect-comma, expect-array]
    - match: \}
      scope: punctuation.definition.dictionary.end.json
      pop: true
    - match: (?=")
      push:
        - match: (?="(args|command|keys)"\s*:)
          pop: true
        - include: support-keys
        - match: (?=})
          pop: true
        - match: (?=,)
          set: in-dictionary-expect-comma
    - include: comments
    - match: '[^"/\s]+'
      scope: invalid.illegal.unexpected-token.sublimekeymap

  support-keys-or-snippet-args:
    - match: (")(args)(")\s*(:)\s*
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json keyword.other.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
      push:
        - match: \s*(\{)\s*
          captures:
            1: punctuation.definition.dictionary.begin.json
          set:
            - match: (")(contents)(")\s*(:)\s*(")
              captures:
                1: string.quoted.double.json punctuation.definition.string.begin.json
                2: string.quoted.double.json support.function.sublimekeymap
                3: string.quoted.double.json punctuation.definition.string.end.json
                4: punctuation.separator.dictionary.key-value.json
                5: string.quoted.double.json punctuation.definition.string.begin.json punctuation.definition.snippet.begin.sublimekeymap
              set:
                - meta_content_scope: meta.snippet.sublimekeymap
                - match: \"
                  scope: string.quoted.double.json punctuation.definition.string.end.json punctuation.definition.snippet.end.sublimekeymap
                  set:
                    - match: \}
                      scope: punctuation.definition.dictionary.end.json
                      set: [support-keys-or-snippet-args, in-dictionary-expect-comma]
                    - match: (?=\S)
                      push: in-dictionary-expect-comma
                - match: ''
                  push:
                    - meta_content_scope: string.quoted.double.json
                    - match: (?=")
                      pop: true
                    - match: (\\)(")
                      captures:
                        1: constant.character.escape.json
                    - include: scope:source.sublimesnippetraw
            - match: \}
              scope: punctuation.definition.dictionary.end.json
              set: in-dictionary-expect-comma
            - include: support-keys
        - match: (?=\S)
          set: [in-dictionary-expect-comma, expect-dictionary]
    - match: (?=})
      pop: true
    - include: support-keys

  expect-command-name:
    - match: (")(insert_snippet)(")\s*(,)\s*
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json support.function.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.pair.json
      set: support-keys-or-snippet-args
    - match: (\")([a-z_]+)(\")
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json support.constant.command-name.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
      set: in-dictionary-expect-comma
    - match: \" # probably illegal command name
      scope: punctuation.definition.string.begin.json
      set:
        - meta_scope: string.quoted.double.json
        - meta_content_scope: invalid.illegal.invalid-command.sublimekeymap
        - match: \"
          scope: punctuation.definition.string.end.json
          set: in-dictionary-expect-comma
        - match: \\.
          scope: constant.character.escape.json
    - match: '[^\s"]+'
      scope: invalid.illegal.expected-string.sublimekeymap

  dictionary:
    - match: \{
      scope: punctuation.definition.dictionary.begin.json
      set:
        - match: \}
          scope: punctuation.definition.dictionary.end.json
          pop: true
        - include: support-keys

  array:
    - match: \[
      scope: punctuation.definition.array.begin.json
      set:
        - match: \]
          scope: punctuation.definition.array.end.json
          pop: true
        - match: (?=\S)
          push:
            - match: (?=\])
              pop: true
            - include: value
            - include: in-array-expect-comma

  value:
    - include: comments
    - include: scope:source.json#string
    - include: scope:source.json#number
    - include: scope:source.json#constant
    - include: dictionary
    - include: array

  expect-dictionary:
    - include: dictionary
    - match: '[^{\s]+'
      scope: invalid.illegal.expected-dictionary.sublimekeymap

  expect-array:
    - include: array
    - match: '[^\[\s]+'
      scope: invalid.illegal.expected-array.sublimekeymap

  support-keys:
    - match: (")(operator)(")\s*(:)\s*(")(regex_contains|not_regex_contains|regex_match|not_regex_match)(")\s*(,)\s*(")(operand)(")\s*(:)\s*(")
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json support.function.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
        5: string.quoted.double.json punctuation.definition.string.begin.json
        6: string.quoted.double.json support.function.sublimekeymap
        7: string.quoted.double.json punctuation.definition.string.end.json
        8: punctuation.separator.dictionary.pair.json
        9: string.quoted.double.json punctuation.definition.string.begin.json
        10: string.quoted.double.json support.function.sublimekeymap
        11: string.quoted.double.json punctuation.definition.string.end.json
        12: punctuation.separator.dictionary.key-value.json
        13: punctuation.definition.string.regex.begin.sublimekeymap
      push:
        - meta_scope: string.quoted.double.json
        - match: \"
          scope: punctuation.definition.string.regex.end.sublimekeymap
          set: in-dictionary-expect-comma
        - match: ''
          push:
            - meta_content_scope: meta.regex.sublimekeymap
            - include: scope:source.escapedregexp
          with_prototype:
            - match: (?=\")
              pop: true
    - match: (")(key)(")\s*(:)\s*(")(selector|eol_selector)(")\s*(,)\s*(?:(")(operator)(")\s*(:)\s*(")(equal|not_equal)(")\s*(,)\s*)?(")(operand)(")\s*(:)\s*(")
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json support.function.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
        4: punctuation.separator.dictionary.key-value.json
        5: string.quoted.double.json punctuation.definition.string.begin.json
        6: string.quoted.double.json support.function.sublimekeymap
        7: string.quoted.double.json punctuation.definition.string.end.json
        8: punctuation.separator.dictionary.pair.json
        9: string.quoted.double.json punctuation.definition.string.begin.json
        10: string.quoted.double.json support.function.sublimekeymap
        11: string.quoted.double.json punctuation.definition.string.end.json
        12: punctuation.separator.dictionary.key-value.json
        13: string.quoted.double.json punctuation.definition.string.begin.json
        14: string.quoted.double.json support.function.sublimekeymap
        15: string.quoted.double.json punctuation.definition.string.end.json
        16: punctuation.separator.dictionary.pair.json
        17: string.quoted.double.json punctuation.definition.string.begin.json
        18: string.quoted.double.json support.function.sublimekeymap
        19: string.quoted.double.json punctuation.definition.string.end.json
        20: punctuation.separator.dictionary.key-value.json
        21: string.quoted.double.json punctuation.definition.string.scope-selector.begin.sublimekeymap
      push:
        - meta_content_scope: string.quoted.double.json
        - match: \"
          scope: string.quoted.double.json punctuation.definition.string.scope-selector.end.sublimekeymap
          set: in-dictionary-expect-comma
        - match: ''
          push:
            - meta_content_scope: string.quoted.double.json meta.scope-selector.sublimekeymap
            - include: scope:text.scope-selector
          with_prototype:
            - match: (?=\")
              pop: true
    - match: (")(\w*)(")\s*
      captures:
        1: string.quoted.double.json punctuation.definition.string.begin.json
        2: string.quoted.double.json support.function.sublimekeymap
        3: string.quoted.double.json punctuation.definition.string.end.json
      push: expect-colon
    - match: \"
      captures:
        1: punctuation.definition.string.begin.json
      push:
        - meta_scope: string.quoted.double.json
        - meta_content_scope: support.function.sublimekeymap
        - match: \"
          scope: punctuation.definition.string.end.json
          set: expect-colon
    - include: comments

  comments:
    - include: scope:source.js#comments

  only-comments:
    - include: comments
    - match: '[^/\s]+'
      scope: invalid.illegal.expected-comment-or-eof.sublimekeymap

  expect-colon:
    - match: (:)\s*
      captures:
        1: punctuation.separator.dictionary.key-value.json
      set:
        - match: (?=\[)
          set: [in-dictionary-expect-comma, array]
        - match: (?=\{)
          set: [in-dictionary-expect-comma, dictionary]
        - include: value
        - include: in-dictionary-expect-comma
    - include: comments
    - match: '[^:\s/]+'
      scope: invalid.illegal.expected-colon.json
